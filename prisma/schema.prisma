// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid())
  email             String    @unique
  passwordHash      String
  nickname          String
  age               Int?
  gender            String?
  profileImageUrl   String?
  bio               String?
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  trainingProfile   TrainingProfile?
  userGyms          UserGym[]
  sentSwipes        Swipe[]          @relation("SwipeFrom")
  receivedSwipes    Swipe[]          @relation("SwipeTo")
  sentMessages      Message[]        @relation("MessageFrom")
  receivedMessages  Message[]        @relation("MessageTo")
  matches1          Match[]          @relation("MatchUser1")
  matches2          Match[]          @relation("MatchUser2")
}

model TrainingProfile {
  id                  String    @id @default(uuid())
  userId              String    @unique
  experienceYears     Int?
  frequencyPerWeek    Int?
  benchPressWeight    Float?
  squatWeight         Float?
  deadliftWeight      Float?
  preferredTimeSlots  String?
  favoriteBodyParts   String?
  trainingGoals       String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Gym {
  id          String    @id @default(uuid())
  name        String
  chainName   String?
  address     String
  latitude    Float
  longitude   Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  userGyms    UserGym[]
}

model UserGym {
  userId      String
  gymId       String
  isPrimary   Boolean   @default(false)
  createdAt   DateTime  @default(now())

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  gym         Gym       @relation(fields: [gymId], references: [id])

  @@id([userId, gymId])
}

model Swipe {
  id          String      @id @default(uuid())
  fromUserId  String
  toUserId    String
  direction   String
  createdAt   DateTime    @default(now())

  fromUser    User        @relation("SwipeFrom", fields: [fromUserId], references: [id])
  toUser      User        @relation("SwipeTo", fields: [toUserId], references: [id])

  @@unique([fromUserId, toUserId])
  @@index([toUserId])
}

model Match {
  id          String      @id @default(uuid())
  user1Id     String
  user2Id     String
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user1       User        @relation("MatchUser1", fields: [user1Id], references: [id])
  user2       User        @relation("MatchUser2", fields: [user2Id], references: [id])
  messages    Message[]

  @@unique([user1Id, user2Id])
  @@index([user2Id])
}

model Message {
  id          String      @id @default(uuid())
  matchId     String
  fromUserId  String
  toUserId    String
  content     String
  imageUrl    String?
  isRead      Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  match       Match       @relation(fields: [matchId], references: [id])
  fromUser    User        @relation("MessageFrom", fields: [fromUserId], references: [id])
  toUser      User        @relation("MessageTo", fields: [toUserId], references: [id])

  @@index([matchId])
  @@index([toUserId])
}

